<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>mylayertransform</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>ClassImplementation</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>/**
 *  CALayer默认使用正交投影，因此没有远小近大效果，而且没有明确的API可以使用透视投影矩阵。
 *  可以通过矩阵连乘自己构造透视投影矩阵。
 *  @param t      透视前的transform操作 eg:CATransform3D rotate = CATransform3DMakeRotation(M_PI_2, 0.5, 0, 0);
 *  @param center 相机 的位置 eg: CGPointMake(0, 0)
 *  @param disZ   相机离z=0平面（屏幕）的距离 eg: 200
 *
 *  @return 透视后效果
 */
CATransform3D CATransform3DPerspect(CATransform3D t, CGPoint center, float disZ)
{
    return CATransform3DConcat(t, CATransform3DMakePerspective(center, disZ));
}

CATransform3D CATransform3DMakePerspective(CGPoint center, float disZ)
{
    CATransform3D transToCenter = CATransform3DMakeTranslation(-center.x, -center.y, 0);
    CATransform3D transBack = CATransform3DMakeTranslation(center.x, center.y, 0);
    CATransform3D scale = CATransform3DIdentity;
    scale.m34 = -1.0f/disZ;
    
    return CATransform3DConcat(CATransform3DConcat(transToCenter, scale), transBack);
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>0A4BE6A9-ECA0-466B-9C06-E2E80B097C06</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetSummary</key>
	<string>Perspect layer transform when transform animation</string>
	<key>IDECodeSnippetTitle</key>
	<string>Perspect Layer Transform</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
